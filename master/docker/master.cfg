# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *

# Buildbot-master settings
manual_builder_name = 'Manual_linux'
manual_builder_name1 = 'Manual_wine'
auto_builder_name = 'Linux'
auto_builder_name1 = 'Wine'
ui_title = 'Komodo'

# Buildmaster dict shorter alias
c = BuildmasterConfig = {}

# WORKERS

c['protocols'] = {"pb": {"port": os.environ.get('BM_BUILDBOT_WORKER_PORT')}}

c['workers'] = [worker.Worker(os.environ.get('UX_WORKERNAME'), os.environ.get('UX_WORKERPASS')),
                worker.Worker(os.environ.get('WN_WORKERNAME'), os.environ.get('WN_WORKERPASS'))]

#if 'BUILDBOT_MQ_URL' in os.environ:
#    c['mq'] = {
#        'type': 'wamp',
#        'router_url': os.environ['BUILDBOT_MQ_URL'],
#        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
#        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
#        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
#        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
#    }

# CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        repourl=os.environ.get('BM_BUILDBOT_REPO'),
        workdir='gitpoller-workdir', branch=os.environ.get('BM_BUILDBOT_REPO_BRANCH'),
        pollInterval=300, pollAtLaunch=True))

# SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch=os.environ.get('BM_BUILDBOT_REPO_BRANCH')),
                            treeStableTimer=None,
                            builderNames=[auto_builder_name, auto_builder_name1]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="Manual",
                            builderNames=[manual_builder_name, manual_builder_name1]))

# BUILDERS

c['secretsProviders'] = [secrets.SecretInAFile(dirname="/var/lib/buildbot/secrets")]

# Unix-tests factory
factory = util.BuildFactory()
factory.addStep(steps.Git(repourl=os.environ.get('BM_BUILDBOT_REPO'), branch=os.environ.get('BM_BUILDBOT_REPO_BRANCH'),
                          name='git checkout branch',
                          haltOnFailure=True))
factory.addStep(steps.ShellCommand(command=["./travis-build.sh"], name='build nspv executable', haltOnFailure=True))
factory.addStep(steps.ShellCommand(command=("/usr/bin/pip3", "install", "-r", "./rpctest/requirements.txt"),
                                            name='install pip reqs', haltOnFailure=True))
factory.addStep(steps.ShellCommand(command=["/usr/bin/python3", "./rpctest/travis.py", util.Secret("url"),
                                            util.Secret("user"), util.Secret("pwd")],
                                            name='fetch test params from remote', haltOnFailure=True))
factory.addStep(steps.ShellCommand(command=["/usr/bin/python3", "./rpctest/buildbot.py"],
                                   env={"PYTHONPATH": "."}, name='execute python tests',
                                   haltOnFailure=True))

# Wine-based win64 tests factory
factory1 = util.BuildFactory()
factory1.addStep(steps.Git(repourl=os.environ.get('BM_BUILDBOT_REPO'), branch=os.environ.get('BM_BUILDBOT_REPO_BRANCH'),
                           name='git checkout branch',
                           haltOnFailure=True))
factory1.addStep(steps.ShellCommand(command=["./build_win.sh"], name='build nspv executable', haltOnFailure=True))
factory1.addStep(steps.ShellCommand(command=("/usr/bin/pip3", "install", "-r", "./rpctest/requirements.txt"),
                                             name='install pip reqs', haltOnFailure=True))
factory1.addStep(steps.ShellCommand(command=["/usr/bin/python3", "./rpctest/travis.py", util.Secret("url"),
                                             util.Secret("user"), util.Secret("pwd")],
                                             name='fetch test params from remote', haltOnFailure=True))
factory1.addStep(steps.ShellCommand(command=["/usr/bin/python3", "./rpctest/buildbot_wine.py"],
                                    env={"PYTHONPATH": "."}, name='execute python tests',
                                    haltOnFailure=True))

# Builders to perform auto and manual tests
c['builders'] = []
c['builders'].append(util.BuilderConfig(
                     name=auto_builder_name,
                     workernames=os.environ.get('UX_WORKERNAME'),
                     factory=factory)
                     )

c['builders'].append(util.BuilderConfig(
                     name=auto_builder_name1,
                     workernames=os.environ.get('WN_WORKERNAME'),
                     factory=factory1)
                     )

c['builders'].append(util.BuilderConfig(
                     name=manual_builder_name,
                     workernames=os.environ.get('UX_WORKERNAME'),
                     factory=factory)
                     )

c['builders'].append(util.BuilderConfig(
                     name=manual_builder_name1,
                     workernames=os.environ.get('WN_WORKERNAME'),
                     factory=factory1)
                     )


# BUILDBOT SERVICES

c['services'] = []

# PROJECT IDENTITY

c['title'] = ui_title
c['titleURL'] = os.environ.get('BM_BUILDBOT_REPO_URL')

c['buildbotURL'] = os.environ.get("BM_BUILDBOT_WEB_URL")

# minimalistic config to activate web UI
c['www'] = dict(port=os.environ.get("BM_BUILDBOT_WEB_PORT"),
                plugins=dict(waterfall_view={}, console_view={}))

# Web UI authorizations settings

c['www']['authz'] = util.Authz(
        allowRules=[
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=['admins'], usernames=[util.Secret("admin_name")])
        ]
)
c['www']['auth'] = util.UserPasswordAuth({str(util.Secret("admin_name")): util.Secret("admin_pwd"), })

# DB URL

c['db'] = {'db_url': os.environ.get("BM_BUILDBOT_DB_URL").format(**os.environ)}
